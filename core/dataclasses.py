from dataclasses import dataclass

from typing import List, Union

from core.abc import Grabber, Matcher

@dataclass
class Data: # can't find any other decent name, if you got one open an issue pls
    
    matchers: List[Matcher]
    grabbers: List[Grabber]

    @staticmethod
    def get_matchers() -> List[Matcher]:
        """ Get all the grabbers. """
        return Data.matchers

    @staticmethod
    def get_grabbers() -> List[Grabber]:
        """ Get all the grabbers. """
        return Data.grabbers
    
    @staticmethod
    def register(module: Union[Matcher, Grabber]) -> None:
        """ Register a new module. """
        
        if issubclass(module, Matcher):
            try:
                Data.matchers.append(module)
            except:
                Data.matchers = [module]

        elif issubclass(module, Grabber):
            try:
                Data.grabbers.append(module)
            except:
                Data.grabbers = [module]

        else:
            raise ValueError('The module must be a subclass of core.abc.Grabber or core.abc.Matcher')

